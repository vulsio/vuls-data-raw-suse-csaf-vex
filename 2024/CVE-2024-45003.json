{
	"document": {
		"aggregate_severity": {
			"namespace": "https://www.suse.com/support/security/rating/",
			"text": "not set"
		},
		"category": "csaf_vex",
		"csaf_version": "2.0",
		"distribution": {
			"text": "Copyright 2024 SUSE LLC. All rights reserved.",
			"tlp": {
				"label": "WHITE",
				"url": "https://www.first.org/tlp/"
			}
		},
		"lang": "en",
		"notes": [
			{
				"category": "summary",
				"text": "SUSE CVE-2024-45003",
				"title": "Title"
			},
			{
				"category": "description",
				"text": "In the Linux kernel, the following vulnerability has been resolved:\n\nvfs: Don't evict inode under the inode lru traversing context\n\nThe inode reclaiming process(See function prune_icache_sb) collects all\nreclaimable inodes and mark them with I_FREEING flag at first, at that\ntime, other processes will be stuck if they try getting these inodes\n(See function find_inode_fast), then the reclaiming process destroy the\ninodes by function dispose_list(). Some filesystems(eg. ext4 with\nea_inode feature, ubifs with xattr) may do inode lookup in the inode\nevicting callback function, if the inode lookup is operated under the\ninode lru traversing context, deadlock problems may happen.\n\nCase 1: In function ext4_evict_inode(), the ea inode lookup could happen\n        if ea_inode feature is enabled, the lookup process will be stuck\n\tunder the evicting context like this:\n\n 1. File A has inode i_reg and an ea inode i_ea\n 2. getfattr(A, xattr_buf) // i_ea is added into lru // lru->i_ea\n 3. Then, following three processes running like this:\n\n    PA                              PB\n echo 2 > /proc/sys/vm/drop_caches\n  shrink_slab\n   prune_dcache_sb\n   // i_reg is added into lru, lru->i_ea->i_reg\n   prune_icache_sb\n    list_lru_walk_one\n     inode_lru_isolate\n      i_ea->i_state |= I_FREEING // set inode state\n     inode_lru_isolate\n      __iget(i_reg)\n      spin_unlock(&i_reg->i_lock)\n      spin_unlock(lru_lock)\n                                     rm file A\n                                      i_reg->nlink = 0\n      iput(i_reg) // i_reg->nlink is 0, do evict\n       ext4_evict_inode\n        ext4_xattr_delete_inode\n         ext4_xattr_inode_dec_ref_all\n          ext4_xattr_inode_iget\n           ext4_iget(i_ea->i_ino)\n            iget_locked\n             find_inode_fast\n              __wait_on_freeing_inode(i_ea) ----→ AA deadlock\n    dispose_list // cannot be executed by prune_icache_sb\n     wake_up_bit(&i_ea->i_state)\n\nCase 2: In deleted inode writing function ubifs_jnl_write_inode(), file\n        deleting process holds BASEHD's wbuf->io_mutex while getting the\n\txattr inode, which could race with inode reclaiming process(The\n        reclaiming process could try locking BASEHD's wbuf->io_mutex in\n\tinode evicting function), then an ABBA deadlock problem would\n\thappen as following:\n\n 1. File A has inode ia and a xattr(with inode ixa), regular file B has\n    inode ib and a xattr.\n 2. getfattr(A, xattr_buf) // ixa is added into lru // lru->ixa\n 3. Then, following three processes running like this:\n\n        PA                PB                        PC\n                echo 2 > /proc/sys/vm/drop_caches\n                 shrink_slab\n                  prune_dcache_sb\n                  // ib and ia are added into lru, lru->ixa->ib->ia\n                  prune_icache_sb\n                   list_lru_walk_one\n                    inode_lru_isolate\n                     ixa->i_state |= I_FREEING // set inode state\n                    inode_lru_isolate\n                     __iget(ib)\n                     spin_unlock(&ib->i_lock)\n                     spin_unlock(lru_lock)\n                                                   rm file B\n                                                    ib->nlink = 0\n rm file A\n  iput(ia)\n   ubifs_evict_inode(ia)\n    ubifs_jnl_delete_inode(ia)\n     ubifs_jnl_write_inode(ia)\n      make_reservation(BASEHD) // Lock wbuf->io_mutex\n      ubifs_iget(ixa->i_ino)\n       iget_locked\n        find_inode_fast\n         __wait_on_freeing_inode(ixa)\n          |          iput(ib) // ib->nlink is 0, do evict\n          |           ubifs_evict_inode\n          |            ubifs_jnl_delete_inode(ib)\n          ↓             ubifs_jnl_write_inode\n     ABBA deadlock ←-----make_reservation(BASEHD)\n                   dispose_list // cannot be executed by prune_icache_sb\n                    wake_up_bit(&ixa->i_state)\n\nFix the possible deadlock by using new inode state flag I_LRU_ISOLATING\nto pin the inode in memory while inode_lru_isolate(\n---truncated---",
				"title": "Description of the CVE"
			},
			{
				"category": "legal_disclaimer",
				"text": "CSAF 2.0 data is provided by SUSE under the Creative Commons License 4.0 with Attribution (CC-BY-4.0).",
				"title": "Terms of use"
			}
		],
		"publisher": {
			"category": "vendor",
			"contact_details": "https://www.suse.com/support/security/contact/",
			"name": "SUSE Product Security Team",
			"namespace": "https://www.suse.com/"
		},
		"references": [
			{
				"category": "external",
				"summary": "CVE-2024-45003",
				"url": "https://www.suse.com/security/cve/CVE-2024-45003"
			},
			{
				"category": "external",
				"summary": "SUSE Security Ratings",
				"url": "https://www.suse.com/support/security/rating/"
			}
		],
		"title": "SUSE CVE CVE-2024-45003",
		"tracking": {
			"current_release_date": "2024-09-05T02:46:12Z",
			"generator": {
				"date": "2024-09-05T02:46:12Z",
				"engine": {
					"name": "cve-database.git:bin/generate-csaf-vex.pl",
					"version": "1"
				}
			},
			"id": "CVE-2024-45003",
			"initial_release_date": "2024-09-05T02:46:12Z",
			"revision_history": [
				{
					"date": "2024-09-05T02:46:12Z",
					"number": "2",
					"summary": "Current version"
				}
			],
			"status": "interim",
			"version": "2"
		}
	},
	"product_tree": {}
}
